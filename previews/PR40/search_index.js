var documenterSearchIndex = {"docs":
[{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"EditURL = \"https://github.com/tkf/Maybe.jl/blob/master/examples/lift-macro.jl\"","category":"page"},{"location":"tutorials/lift-macro/#tutorial","page":"How to use @?","title":"How to use @?","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"using Maybe","category":"page"},{"location":"tutorials/lift-macro/#Introduction","page":"How to use @?","title":"Introduction","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Julia Base provides functions findfirst and findlast that returns an integer when an element is found:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"findfirst(x -> gcd(x, 42) == 21, 50:200)","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"and nothing if not:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@assert findlast(x -> gcd(x, 42) == 23, 50:200) === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"It is rather tedious to combine such functions:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function find_some_random_range_1(data)\n    f(x) = gcd(x, 42) == 21\n    i = findfirst(f, data)\n    i === nothing && return nothing\n    j = findlast(f, data)\n    j === nothing && return nothing\n    return data[i:j]\nend\n\n@assert find_some_random_range_1(50:200) === 63:189\n@assert find_some_random_range_1(30:50) === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"To solve this issue, Maybe.jl provides a macro @? that lets you write","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function find_some_random_range_2(data)\n    f(x) = gcd(x, 42) == 21\n    @? begin\n        i = findfirst(f, data)\n        j = findlast(f, data)\n        return data[i:j]\n    end\nend\n\n@assert find_some_random_range_2(50:200) === Some(63:189)\n@assert find_some_random_range_2(30:50) === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Similarly, @? is also useful for indexing into arrays, dictionaries, etc. that may fail.  For example","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"dict = Dict(:a => 1, :b => nothing, :c => 2)\n@assert (@? dict[:a] + dict[:c]) == Some(3)\n@assert (@? dict[:a] + dict[:non_existing_key]) === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"This is explained in more details in Indexing section below.","category":"page"},{"location":"tutorials/lift-macro/#How-it-works","page":"How to use @?","title":"How it works","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"The above example find_some_random_range_2 is roughly equivalent to","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function find_some_random_range_3(data)\n    f(x) = gcd(x, 42) == 21\n    mi = findfirst(f, data)\n    mi === nothing && return nothing  # (1)\n    i = something(mi)                 # (2)\n    mj = findlast(f, data)\n    mj === nothing && return nothing  # (1)\n    j = something(mj)                 # (2)\n    md = Maybe.getindex(data, i:j)    # (3)\n    md === nothing && return nothing  # (1)\n    d = something(md)                 # (2′)\n    return Some(d)                    # (4)\nend\n\n@assert find_some_random_range_3(50:200) === Some(63:189)\n@assert find_some_random_range_3(30:50) === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Observe that:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"(1) If a function returns nothing, the whole evaluation short-circuits and evaluates to nothing.  (Side notes: short-circuiting is not actually implemented using return in @? so that it can be used outside functions.)","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"(2) The returned value is always unwrapped by something.  Thus, it works with \"ordinary\" functions like + as well as a function returning Some (like Maybe.getindex); see (2′).","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"(3) Indexing dispatches to Maybe.getindex.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"(4) Finally, the returned result is always ensured to be wrapped by Some.","category":"page"},{"location":"tutorials/lift-macro/#More-examples","page":"How to use @?","title":"More examples","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Consider a function that returns nothing on \"failure\":","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"maybe_positive(x) = x > 0 ? x : nothing;\nnothing #hide","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"When a function call in @? is evaluated to a non-nothing, the returned value is wrapped in Some:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? maybe_positive(1)","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"When Some appears in the argument positions, they are automatically un-wrapped:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? maybe_positive(1) + 1","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? is evaluated to nothing when the first sub-expression is evaluated to nothing:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"r = @? maybe_positive(-1) + 1\n@assert r === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Literal nothing is transformed to Some(nothing):","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? terminates the call chain immediately when it sees nothing as the return value.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"ARG_HISTORY = []\ndemo(label, x) = (push!(ARG_HISTORY, label => x); x)\n\nr = @? demo(2, identity(demo(1, nothing)))\n@assert r === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Note that demo(2, ...) is not called:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"ARG_HISTORY","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"This can be avoided by prefixing the function name by $:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"empty!(ARG_HISTORY)\n\n@? $demo(2, $identity($demo(1, nothing)))","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Now demo(2, ...) is called:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"ARG_HISTORY","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"This is because @? automatically unwraps Some in the call chain. It means that Some acts like the identity function inside @?:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? Some(Some(Some(nothing)))","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"On the other hand, identity acts like \"unwrap\" function:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"r = @? identity(identity(Some(nothing)))\n@assert r === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Finally, with $Some:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? $Some($Some($Some(nothing)))","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"$(expression) can be used to evaluate the whole expression in the normal context","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? $(Some(Some(Some(nothing))))","category":"page"},{"location":"tutorials/lift-macro/#tutorials-lift-macro-indexing","page":"How to use @?","title":"Indexing","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Index access is also lifted.  Consider a dictionary","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"dict = Dict(:a => Dict(:b => nothing, :c => 2));\nnothing #hide","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Any value stored in the container (here, a Dict) is returned as a Some:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? dict[:a][:c]","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Thus, nothing stored in the container is returned as Some(nothing)","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? dict[:a][:b]","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"On the other hand, accessing non-existing index returns nothing:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@assert (@? dict[:a][:d]) === nothing\n@assert (@? dict[:d]) === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Index access can be \"fused\" with other function calls:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@assert (@? dict[:a][:c] + 1) === Some(3)\n@assert (@? dict[:a][:d] + 1) === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Existing nothing value can be normalized using something as usual inside @?.  This is because @? automatically unwraps Some once.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@assert (@? something(dict[:a][:b], 0) + 1) === Some(1)\n@assert (@? something(dict[:a][:c], 0) + 1) === Some(3)\n@assert (@? something(dict[:a][:d], 0) + 1) === nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Since identity acts like unwrapping operation inside @?, it can be used for normalizing non-existing key and existing nothing to the same value:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@assert something((@? identity(dict[:a][:b])), 0) + 1 === 1\n@assert something((@? identity(dict[:a][:c])), 0) + 1 === 3\n@assert something((@? identity(dict[:a][:d])), 0) + 1 === 1","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Indexing also works with arrays","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"vectors = [[1, 2], [3, 4, 5]]\n\n@assert (@? vectors[1][2]) === Some(2)\n@assert (@? vectors[3][4]) === nothing\n@assert (@? vectors[1][3]) === nothing","category":"page"},{"location":"tutorials/lift-macro/#@?-return","page":"How to use @?","title":"@? return","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"return in @? is a powerful pattern for returning a non-nothing value.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function first_something(dict)\n    @? return dict[:a]\n    @? return dict[:b]\n    @? return dict[:c]\n    return nothing\nend\n\n@assert first_something(Dict()) == nothing\n@assert first_something(Dict(:c => 3)) == Some(3)\n@assert first_something(Dict(:a => 1, :c => 3)) == Some(1)","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Use $return(x) to avoid the returned value to be automatically wrapped by Some.  Note that the parentheses are required.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function first_something2(dict)\n    @? $return(dict[:a])\n    @? $return(dict[:b])\n    @? $return(dict[:c])\n    return nothing\nend\n\n@assert first_something2(Dict()) == nothing\n@assert first_something2(Dict(:c => 3)) == 3\n@assert first_something2(Dict(:a => 1, :c => 3)) == 1","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Alternatively, combined with @something:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function first_something3(dict)\n    return @something {\n        @? dict[:a];\n        @? dict[:b];\n        @? dict[:c];\n        0;  # fallback\n    }\nend\n\n@assert first_something3(Dict()) === 0\n@assert first_something3(Dict(:c => 3)) === 3\n@assert first_something3(Dict(:a => 1, :c => 3)) === 1","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Note that @? can have multiple statements.  Any of the sub-expression evaluating to nothing short-circuits to the end of @? block.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function a_plus_b(dict)\n    @? begin\n        a = dict[:a]\n        b = dict[:b]\n        return a + b\n    end\n    return 0\nend\n\n@assert a_plus_b(Dict(:a => 1)) == 0\n@assert a_plus_b(Dict(:a => 1, :b => 2)) == Some(3)","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Note that @? works with other control flows like break:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function something_positive_add3(xs, idx)\n    found = nothing\n    for i in idx\n        @? if xs[i] > 0  # out-of-bound access is ignored\n            found = i\n            break\n        end\n    end\n    return @? xs[found] + 3\nend\n\n@assert something_positive_add3([-1, 0, 1], [0, 1, 3]) === Some(4)\n@assert something_positive_add3([-1, 0, 1], [0, 1, 2]) === nothing","category":"page"},{"location":"tutorials/lift-macro/#Combining-@?-and-@something","page":"How to use @?","title":"Combining @? and @something","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"As explained, using @? in @something is well supported. However, further nesting is not supported (as the same expression would be processed by @? twice).  Assigning to an intermediate variable is a safe way to use the result of @something in @?. The pattern @something(..., return) is useful inside functions for this.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function extract_a_and_bc(x)\n    c = @something {\n        @? x[:b][:c];\n        @? x[:b][:ccc];\n        return;  # filter out if none of them exist\n    }\n    return @? (a = x[:a], c = c)\nend\n\n@assert extract_a_and_bc(Dict(:a => 1, :b => Dict(:c => 2))) === Some((a = 1, c = 2))\n@assert extract_a_and_bc(Dict(:a => 1)) === nothing\n@assert extract_a_and_bc(Dict(:a => 1, :b => Dict())) === nothing\n@assert extract_a_and_bc(Dict(:b => Dict(:c => 2))) === nothing\n@assert extract_a_and_bc(Dict(:a => 10, :b => Dict(:ccc => 20))) === Some((a = 10, c = 20))","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"In a rare situation, it may be useful to use $(...) to nest @something-of-@?s in @?:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"function a_plus_b_plus_c_or_d_times_2(x)\n    @? begin\n        p = x[:a] + x[:b]\n        q = $(@something {\n            @? p + x[:c];\n            @? p + x[:d];\n            Some(nothing);  # `return` works as well\n        })\n        return 2q\n    end\nend\n\n@assert a_plus_b_plus_c_or_d_times_2(Dict(:a => 1, :b => 2, :c => 3)) == Some(12)\n@assert a_plus_b_plus_c_or_d_times_2(Dict(:a => 1, :b => 2, :d => 3)) == Some(12)\n@assert a_plus_b_plus_c_or_d_times_2(Dict(:a => 1, :b => 2)) === nothing","category":"page"},{"location":"tutorials/lift-macro/#Functions","page":"How to use @?","title":"Functions","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"When @? sees functions (including closures and do blocks ), it converts them recursively to operate on Union{Some{T},Nothing}.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? get_a_plus_b(dict) =\n    get(dict, :a_plus_b) do\n        dict[:a] + dict[:b]\n    end\n\n@assert get_a_plus_b(Dict(:a_plus_b => 1)) == Some(1)\n@assert get_a_plus_b(Dict(:a => 1, :b => 2)) == Some(3)\n@assert get_a_plus_b(Dict(:b => 1)) == nothing","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"Thus, functions created with @? work nicely in @?:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? begin\n    x = get_a_plus_b(Dict(:a_plus_b => 1))\n    y = get_a_plus_b(Dict(:a => 1, :b => 2))\n    x + y\nend","category":"page"},{"location":"tutorials/lift-macro/#Debugging","page":"How to use @?","title":"Debugging","text":"","category":"section"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"You can include debugging information to @? expr with :debug flag as in @? :debug expr.  This inserts @debug logging statements for every possible short-circuit points.  When using the standard Julia logger, this information can be printed by setting the environment variable:","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"ENV[\"JULIA_DEBUG\"] = \"all\"  # or narrower scope like \"MyPackage\"","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"This logging statement prints the expression that is evaluated to nothing and all the local variables using Base.@locals.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"using Logging                                                        # hide\nwithenv(\"JULIA_DEBUG\" => \"all\") do                                   # hide\nwith_logger(SimpleLogger(stdout, Logging.Debug)) do                  # hide\ndict = Dict(:a => Dict(:b => nothing, :c => 2))\n@? :debug dict[:a][:d]\nend                                                                  # hide\nend                                                                  # hide","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"@? :debug expr also inserts a call to a no-op function Maybe._break.  When using Debugger.jl, the state just before exit can be examined by adding it to the breakpoint with bp add Maybe._break.","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"julia> using Maybe, Debugger\n\njulia> dict = Dict(:a => Dict(:b => nothing, :c => 2));\n\njulia> f(dict) = @? :debug dict[:a][:d];\n\njulia> @enter f(dict)\nIn f(dict) at REPL[4]:1\n>1  f(dict) = @? :debug dict[:a][:d]\n\nAbout to run: return Maybe.Implementations.nothing\n1|debug> bp add Maybe._break\n[ Info: added breakpoint for function _break\n1] _break\n\n1|debug> c\nHit breakpoint:\nfailed to lookup source code, showing lowered code:\nIn _break() at /home/takafumi/.julia/dev/Maybe/src/lift.jl:51\n>1  1 ─     return Maybe.Implementations.nothing\n\nAbout to run: $(Expr(:meta, :noinline))\n1|debug> up\nIn f(dict) at REPL[4]:1\n>1  f(dict) = @? :debug dict[:a][:d]\n\nAbout to run: (Maybe._break)()\n2|debug>","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"","category":"page"},{"location":"tutorials/lift-macro/","page":"How to use @?","title":"How to use @?","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Maybe.jl","page":"Maybe.jl","title":"Maybe.jl","text":"","category":"section"},{"location":"","page":"Maybe.jl","title":"Maybe.jl","text":"note: Note\nTutorial is the best place to start.","category":"page"},{"location":"#Maybe","page":"Maybe.jl","title":"Maybe","text":"","category":"section"},{"location":"","page":"Maybe.jl","title":"Maybe.jl","text":"Maybe\nMaybe.T","category":"page"},{"location":"#Maybe","page":"Maybe.jl","title":"Maybe","text":"Maybe.jl: Optional value handling for Julia\n\n(Image: Dev) (Image: GitHub Actions)\n\nMaybe.jl provides functions and macros for handling the values of type Union{Some,Nothing}; i.e., option type.  The main entry point for the optional value handling is the macro @?:\n\njulia> using Maybe\n\njulia> data = [1, 3, 2, 1];\n\njulia> @? data[findfirst(iseven, data)]\nSome(2)\n\njulia> y = @? data[findfirst(>=(4), data)]\n\njulia> @assert y === nothing\n\nMaybe.jl also provides low-level functions such as Maybe.get which is the \"Maybe\" variant of Base.get:\n\njulia> Maybe.get(Dict(:a => 1), :a)\nSome(1)\n\njulia> @assert Maybe.get(Dict(:a => 1), :b) === nothing\n\nSee more in the documentation.\n\n\n\n\n\n","category":"module"},{"location":"#Maybe.T","page":"Maybe.jl","title":"Maybe.T","text":"Maybe.T{T}\n\nA shorthand for Union{Some{T},Nothing}.\n\n\n\n\n\n","category":"constant"},{"location":"","page":"Maybe.jl","title":"Maybe.jl","text":"Modules = [Maybe]\nOrder = [:macro]","category":"page"},{"location":"#Maybe.@?","page":"Maybe.jl","title":"Maybe.@?","text":"@? expr\n@? :debug expr\n\n\"Lift\" functions to operate on Union{Some{T}, Nothing}.\n\nIdea:\n\nEach function f(::T₁, ..., ::Tₙ) -> ::R is (conceptually) lifted to f′(::Union{Some{T₁}, Nothing}, ..., ::Union{Some{Tₙ}, Nothing}) -> ::Union{Some{R}, R, Nothing}.\nIf any of the returned value is nothing, the evaluation of expr in @? short-circuits and evaluates to nothing.\n\nDebugging support (experimental): In the two-argument form @? :debug expr (:debug is the literal symbol :debug), @? inserts @debug logging statements for all possible short-circuiting points. This logging statement prints the expression that is evaluated to nothing and all the local variables using Base.@locals.  This macro also inserts a call to a no-op function Maybe._break.  When using Debugger.jl, the state just before exit can be examined by adding it to the breakpoint with bp add Maybe._break.\n\nSee the tutorial for more information.\n\nExamples\n\njulia> using Maybe\n\njulia> dict = Dict(:a => Dict(:b => 1));\n\njulia> @? dict[:a][:b] + 2\nSome(3)\n\njulia> @? dict[:a][:b] + dict[:c]  # => nothing\n\nThe expression in @? short-circuits when a call returns nothing:\n\njulia> f() = nothing;\n\njulia> @? println(f())\n\nSome is unwrapped when it appears in the argument position:\n\njulia> f() = Some(\"hello\");\n\njulia> @? println(f())\nhello\n\nNon-nothing returned value is always ensured to be wrapped in Some at the end\n\njulia> f() = \"hello\";\n\njulia> @? f()\nSome(\"hello\")\n\njulia> g() = Some(\"hello\");\n\njulia> @? g()\nSome(\"hello\")\n\nnothing literal is always wrapped\n\njulia> @? Some(nothing)\nSome(nothing)\n\nreturn $expr does not return when $expr evaluates to nothing\n\njulia> f() = (@? return identity(nothing); return 1);\n\njulia> f()\n1\n\nreturn $expr returns Some($expr):\n\njulia> @? 1 + 1\nSome(2)\n\njulia> f() = @? return 1 + 1;\n\njulia> f()\nSome(2)\n\n$(...) can be used for switching to the normal evaluation\n\njulia> @? Some(Some(Some(1)))\nSome(1)\n\njulia> @? $(Some(Some(Some(1))))\nSome(Some(Some(Some(1))))\n\n$f(...) can be used for extra wrapping with Some\n\njulia> f() = Some(\"hello\");\n\njulia> @? f()\nSome(\"hello\")\n\njulia> @? $f()\nSome(Some(\"hello\"))\n\n@? recursively transforms functions\n\njulia> @? f(dict, i, j, k) =\n           get(dict, i) do\n               dict[j] + dict[k]\n           end;\n\njulia> f(Dict(), :a, :b, :c)\n\njulia> f(Dict(:a => 1), :a, :b, :c)\nSome(1)\n\njulia> f(Dict(:b => 1), :a, :b, :c)\n\njulia> f(Dict(:b => 1, :c => 2), :a, :b, :c)\nSome(3)\n\n\n\n\n\n","category":"macro"},{"location":"#Maybe.@something","page":"Maybe.jl","title":"Maybe.@something","text":"@something(ex₁, ex₂, ..., exₙ)\n@something{ex₁; ex₂; ...; exₙ}\n@something {ex₁; ex₂; ...; exₙ}\n\nA lazy version of something(x₁, x₂, ..., xₙ).  Evaluate exᵢ one by one and return something(result) of the first non-nothing result of exᵢ.  Throw an error if everything is evaluated to nothing.\n\nnote: Note\n@something{ex₁; ex₂; ...; exₙ} requires Juila >= 1.5.\n\nExamples\n\njulia> using Maybe: @something\n\njulia> @something(\n           (println(\"first\"); nothing),\n           (println(\"second\"); 2),\n           (println(\"third\"); 3),\n       )\nfirst\nsecond\n2\n\njulia> function maybe_add(xs)\n           a = @something(get(xs, 1, nothing), return)\n           b = @something(get(xs, 2, nothing), return)\n           return a + b\n       end;\n\njulia> maybe_add([])\n\njulia> maybe_add([3, 4])\n7\n\njulia> @something(nothing, nothing, nothing)\nERROR: ArgumentError: all evaluated as `nothing`\n[...]\n\nSince @something is often used with @?, the form @something {ex₁; ex₂; ...; exₙ} can also be used to avoid extra parentheses:\n\njulia> d = Dict(:a => Dict(:b => 1, :c => nothing));\n\njulia> @something {\n           @? d[:A][:B];\n           @? d[:A][:b];\n           @? d[:a][:b];\n           @? d[:c][:d];\n       }\n1\n\njulia> @something(\n           (@? d[:A][:B]),\n           (@? d[:A][:b]),\n           (@? d[:a][:b]),\n           (@? d[:c][:d]),\n       )\n1\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Maybe.jl","title":"Maybe.jl","text":"Modules = [Maybe]\nOrder = [:function]\nFilter = t -> parentmodule(t) === Maybe","category":"page"},{"location":"#Maybe.eltype","page":"Maybe.jl","title":"Maybe.eltype","text":"Maybe.eltype(itr) -> Some(T::Type) or nothing\n\nReturn the element type of iterator if known.\n\nExamples\n\njulia> using Maybe\n\njulia> Maybe.eltype(x + 0 for x in 1:3)\n\njulia> Maybe.eltype(1:0.1:3)\nSome(Float64)\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.first","page":"Maybe.jl","title":"Maybe.first","text":"Maybe.first(xs) -> Some(x) or nothing\n\nTry to get the first item x in the container xs and return Some(x) if exists.  Return nothing if xs is empty.\n\nExamples\n\njulia> using Maybe\n\njulia> Maybe.first([])\n\njulia> Maybe.first([1])\nSome(1)\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.get","page":"Maybe.jl","title":"Maybe.get","text":"Maybe.get(d, k) -> Some(x) or nothing\n\nTry to get an item x at key k and return Some(x) if found. Return nothing if not found.\n\nIt is more efficient than calling haskey(dict, key) and then dict[key] because it does not lookup the key twice.\n\nExamples\n\njulia> using Maybe\n\njulia> Maybe.get(Dict(), :a)\n\njulia> Maybe.get(Dict(:a => 1), :a)\nSome(1)\n\njulia> Maybe.get([1], 2)\n\njulia> Maybe.get([1], 1)\nSome(1)\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.getindex","page":"Maybe.jl","title":"Maybe.getindex","text":"Maybge.getindex(xs, indices...) -> Some(x) or nothing\n\nTry to get an item x at location specified by indices and return Some(x) if found.  Return nothing if not found.\n\nWhen xs is an array and Maybge.getindex is called inside @inbounds, it always try to return Some(x) without checking the bounds.\n\nExamples\n\njulia> using Maybe\n\njulia> Maybe.getindex((11, 22, 33), 0)\n\njulia> Maybe.getindex((11, 22, 33), 2)\nSome(22)\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.getproperty","page":"Maybe.jl","title":"Maybe.getproperty","text":"Maybe.getproperty(object, name) -> Some(property) or nothing\n\nReturn the property named name if object has it.\n\nExamples\n\njulia> using Maybe\n\njulia> Maybe.getproperty((a = 1,), :b)\n\njulia> Maybe.getproperty((a = 1,), :a)\nSome(1)\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.last","page":"Maybe.jl","title":"Maybe.last","text":"Maybe.last(xs) -> Some(x) or nothing\n\nTry to get the last item x in the container xs and return Some(x) if exists.  Return nothing if xs is empty.\n\nExamples\n\njulia> using Maybe\n\njulia> Maybe.last([])\n\njulia> Maybe.last([1])\nSome(1)\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.length","page":"Maybe.jl","title":"Maybe.length","text":"Maybe.length(itr) -> Some(n::Integer) or nothing\n\nReturn the length of iterator if known.\n\nExamples\n\njulia> using Maybe\n\njulia> Maybe.length(x for x in 1:3 if false)\n\njulia> Maybe.length(1:3)\nSome(3)\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.Extras","page":"Maybe.jl","title":"Maybe.Extras","text":"","category":"section"},{"location":"","page":"Maybe.jl","title":"Maybe.jl","text":"Maybe.Extras","category":"page"},{"location":"#Maybe.Extras","page":"Maybe.jl","title":"Maybe.Extras","text":"Maybe.Extras\n\nA namespace for extra API; this is for preserving Maybe.* namespace for (mainly) Base-compatible API.\n\nSince there is no name clash with Base API, using Maybe.Extras imports the API defined in Maybe.Extras.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Maybe.jl","title":"Maybe.jl","text":"Modules = [Maybe]\nOrder = [:function]\nFilter = t -> parentmodule(t) === Maybe.Extras","category":"page"},{"location":"#Maybe.Extras.defaultto","page":"Maybe.jl","title":"Maybe.Extras.defaultto","text":"Maybe.Extras.defaultto(x)\n\nA shorthand of ifnothing(() -> x).\n\nExamples\n\njulia> using Maybe.Extras\n\njulia> Some(1) |> defaultto(:fallback)\n1\n\njulia> nothing |> defaultto(:fallback)\n:fallback\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.Extras.getnested","page":"Maybe.jl","title":"Maybe.Extras.getnested","text":"Maybe.Extras.getnested(x, k₁, k₂, ..., kₙ) -> v::Union{Some{T},Nothing}\n\nTry to get the item v = x[k₁][k₂][...][kₙ] and return Some(v); return nothing if the key does not exist.\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.Extras.ifnothing","page":"Maybe.jl","title":"Maybe.Extras.ifnothing","text":"Maybe.Extras.ifnothing(f) -> x -> ifnothing(f, x)\nMaybe.Extras.ifnothing(f, nothing) -> f()\nMaybe.Extras.ifnothing(f, Some(x)) -> x\n\nSee also defaultto.\n\nExamples\n\njulia> using Maybe.Extras\n\njulia> Some(1) |> ifnothing(() -> :fallback)\n1\n\njulia> nothing |> ifnothing(() -> :fallback)\n:fallback\n\n\n\n\n\n","category":"function"},{"location":"#Maybe.Extras.maybe","page":"Maybe.jl","title":"Maybe.Extras.maybe","text":"maybe(f) -> f′\n\nTransform (\"lift\") function f(::T₁, ..., ::Tₙ) -> ::Union{Some{R}, R, Nothing} to f′(::Union{T₁, Some{T₁}, Nothing}, ..., ::Union{Tₙ, Some{Tₙ}, Nothing}) -> ::Union{Some{R}, Nothing}.\n\nExamples\n\njulia> using Maybe.Extras\n\njulia> const ⊕ = maybe(+);\n\njulia> 1 ⊕ nothing\n\njulia> 1 ⊕ 2\nSome(3)\n\n\n\n\n\n","category":"function"}]
}
